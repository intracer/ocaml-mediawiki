(**
  {5 Prop queries}
*)

open Utils
open WTypes
open Datatypes

(** {6 Page retrieving} *)

val of_titles : session -> string list -> (string * page) Enum.t
(** [of_titles s titles] associates to every title in [titles] the corresponding
    page. If the title is invalid or missing, it is absent from the answer. *)

val of_pageids : session -> _page_ Id.t list -> (_page_ Id.t * page) Enum.t
(** [of_pageids s pageids] associates to every page id in [pageids] the 
    corresponding page. If the id is invalid or missing, it is absent from the 
    answer. *)

val normalize : session -> string list -> (string * Title.t) Enum.t
(** [normalize s titles] returns the canonical title associated to a given 
    string, regardless of the existence of the page. If a title is invalid, it
    is absent from the answer. *)

(** {6 Revision retrieving} *)

val revisions : session -> ?fromid:_revision_ Id.t -> ?uptoid:_revision_ Id.t -> 
  ?fromts:Timestamp.t -> ?uptots:Timestamp.t -> ?order:order -> 
  ?usrfilter:user_filter -> ?limit:int -> page -> revision Enum.t
(** Returns the list of revisions of a given page. Empty result if the page is 
  invalid. *)

val of_revids :
  session -> _revision_ Id.t list -> (_revision_ Id.t * revision) Enum.t
(** [of_revids s revids] associates to every revision id in [revids] the 
    corresponding revision. If the id is invalid or missing, it is absent from
    the answer. *)

(** {6 Content} *)

val content : session -> revision list -> (_revision_ Id.t * string) Enum.t
(** Associates to every revision its content by id.
    If a revision is invalid, it is not present in the answer. *)

val last_revision_of_titles :
  session -> string list -> (string * (revision * string)) Enum.t
(** Associates to every title its last revision and last content. If a title is
  invalid or missing, it is absent from the answer. *)

(** {6 Diffs} *)

val diff : session -> _revision_ Id.t -> _revision_ relative_id -> diff Call.t

(**
  {6 Various enumerations}

  These are various enumerations generated by prop queries.
*)

val links : session -> ?ns:namespace list -> ?limit:int -> page -> Title.t Enum.t
(** Returns the list of link titles from a given page. *)

val langlinks : session -> ?limit:int -> page -> langlink Enum.t
(** Return the list of interwiki links from a given page. *)

val images : session -> ?limit:int -> page -> Title.t Enum.t
(** Returns the list of image titles used on a given page. *)

val templates : session -> ?ns:namespace list -> ?limit:int -> page -> Title.t Enum.t
(** Returns the list of template titles used on a given page. *)

val categories : session -> ?limit:int -> page -> string Enum.t
(** Returns the list of categories to which pertains a given page. *)

val external_links : session -> ?limit:int -> page -> string Enum.t
(** Returns the list of external links contained in a given page. *)

(** {6 Debugging} *)

val dummy_title : Title.t
val dummy_page : _page_ Id.t -> page
val dummy_revision : _revision_ Id.t -> revision
